// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(KlinikaContext))]
    [Migration("20230612190619_V7")]
    partial class V7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Cenovnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.HasKey("ID");

                    b.ToTable("Cenovnik");
                });

            modelBuilder.Entity("Models.Formular", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AdresaStanovanja")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("JMBG")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("MestoStanovanja")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PacijentID")
                        .HasColumnType("int");

                    b.Property<int?>("RecepcijaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PacijentID");

                    b.HasIndex("RecepcijaID");

                    b.ToTable("Formulari");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrojTelefona")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Korisnik");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Pregled", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DatumVreme")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dijagnoza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LekarID")
                        .HasColumnType("int");

                    b.Property<int?>("PacijentID")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LekarID");

                    b.HasIndex("PacijentID");

                    b.HasIndex("UslugaID");

                    b.ToTable("Pregledi");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ClanID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kreator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClanID");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Models.Recepcija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Recepcije");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CenaUsluge")
                        .HasColumnType("int");

                    b.Property<string>("OpisUsluge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VrstaUsluge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("cenovnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("cenovnikID");

                    b.ToTable("Usluge");
                });

            modelBuilder.Entity("Models.ClanKlinike", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<int>("BrojKancelarije")
                        .HasColumnType("int");

                    b.Property<bool>("Direktor")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RadnoMestoID")
                        .HasColumnType("int");

                    b.Property<string>("Specijalizacija")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("RadnoMestoID");

                    b.HasDiscriminator().HasValue("ClanKlinike");
                });

            modelBuilder.Entity("Models.Pacijent", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.HasDiscriminator().HasValue("Pacijent");
                });

            modelBuilder.Entity("Models.Formular", b =>
                {
                    b.HasOne("Models.Pacijent", "Pacijent")
                        .WithMany("Formulari")
                        .HasForeignKey("PacijentID");

                    b.HasOne("Models.Recepcija", "Recepcija")
                        .WithMany("Formulari")
                        .HasForeignKey("RecepcijaID");

                    b.Navigation("Pacijent");

                    b.Navigation("Recepcija");
                });

            modelBuilder.Entity("Models.Pregled", b =>
                {
                    b.HasOne("Models.ClanKlinike", "Lekar")
                        .WithMany("Pregledi")
                        .HasForeignKey("LekarID");

                    b.HasOne("Models.Pacijent", "Pacijent")
                        .WithMany("Pregledi")
                        .HasForeignKey("PacijentID");

                    b.HasOne("Models.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaID");

                    b.Navigation("Lekar");

                    b.Navigation("Pacijent");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.HasOne("Models.ClanKlinike", "Clan")
                        .WithMany("Recenzije")
                        .HasForeignKey("ClanID");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.HasOne("Models.Cenovnik", "cenovnik")
                        .WithMany("Usluge")
                        .HasForeignKey("cenovnikID");

                    b.Navigation("cenovnik");
                });

            modelBuilder.Entity("Models.ClanKlinike", b =>
                {
                    b.HasOne("Models.Recepcija", "RadnoMesto")
                        .WithMany("Lekari")
                        .HasForeignKey("RadnoMestoID");

                    b.Navigation("RadnoMesto");
                });

            modelBuilder.Entity("Models.Cenovnik", b =>
                {
                    b.Navigation("Usluge");
                });

            modelBuilder.Entity("Models.Recepcija", b =>
                {
                    b.Navigation("Formulari");

                    b.Navigation("Lekari");
                });

            modelBuilder.Entity("Models.ClanKlinike", b =>
                {
                    b.Navigation("Pregledi");

                    b.Navigation("Recenzije");
                });

            modelBuilder.Entity("Models.Pacijent", b =>
                {
                    b.Navigation("Formulari");

                    b.Navigation("Pregledi");
                });
#pragma warning restore 612, 618
        }
    }
}
